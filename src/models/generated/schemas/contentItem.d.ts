
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */


export type StatusOfTheCollection = string;
export type NumberOfItemsInTheCollection = number | string;
export type UniqueIdentifierForTheUser = string;
export type UniqueUsernameForTheUserForOtherHumans = string;

/**
 * Unified schema for media content items in the Impresso project, with modular field groups.
 */
export interface ContentItem {
  /**
   * Unique identifier for the content item
   */
  id: string;
  /**
   * Unique issue identifier
   */
  issueId?: string;
  meta?: ContentItemMeta;
  text?: ContentItemText;
  semanticEnrichments?: ContentItemSemanticEnrichments;
  image?: ContentItemImage;
  audio?: ContentItemAudio;
  access?: ContentItemAccessRights;
}
/**
 * Content Item metadata
 */
export interface ContentItemMeta {
  /**
   * Type of the media source.
   */
  sourceType: "newspaper" | "radio_broadcast" | "radio_magazine" | "radio_schedule" | "monograph" | "encyclopedia";
  /**
   * Medium of the source (audio for audio radio broadcasts, print for newspapers, typescript for digitised radio bulletin typescripts).
   */
  sourceMedium: "audio" | "print" | "typescript";
  /**
   * Media title alias. Usually a 3 letter code of the media title (newspaper, radio station, etc.).
   */
  mediaId?: string;
  /**
   * Full date and time in ISO 8601 format
   */
  date: string;
  /**
   * Identifier of the partner providing the content item.
   */
  partnerId?: string;
  /**
   * Country code of the content item.
   */
  countryCode?: string;
  /**
   * Province code of the content item.
   */
  provinceCode?: string;
}
/**
 * Textual content details
 */
export interface ContentItemText {
  /**
   * Type of document, e.g., page (p) or content item (ci).
   */
  documentType?: "p" | "ci";
  /**
   * Type of content item, e.g., article, section.
   */
  itemType?:
    | "ar"
    | "ad"
    | "page"
    | "tb"
    | "ob"
    | "w"
    | "chapter"
    | "chronicle"
    | "unsegmented"
    | "radio_broadcast_episode"
    | "radio_bulletin";
  /**
   * Original language of the content item.
   */
  originalLangCode?: string;
  /**
   * Computed language of the content item.
   */
  langCode?: string;
  /**
   * Token count of the content item (space split).
   */
  contentLength?: number;
  /**
   * Snippet of the content item (first 150 characters).
   */
  snippet?: string;
  /**
   * Title of the content item
   */
  title?: string;
  /**
   * Full text content
   */
  content?: string;
  matches?: ContentItemTextMatch[];
}
/**
 * TODO
 */
export interface ContentItemTextMatch {
  /**
   * TODO
   */
  fragment: string;
  /**
   * TODO
   */
  coords?: number[];
  /**
   * TODO
   */
  pageUid?: string;
  /**
   * TODO
   */
  iiif?: string;
}
/**
 * Semantic enrichments information
 */
export interface ContentItemSemanticEnrichments {
  /**
   * OCR quality assessment score between 0,00 and 1,00.
   */
  ocrQuality?: number;
  /**
   * Lists of named entities in the content item by type.
   */
  namedEntities?: {
    persons?: ContentItemNamedEntity[];
    locations?: ContentItemNamedEntity[];
    organisations?: ContentItemNamedEntity[];
    newsagencies?: ContentItemNamedEntity[];
  };
  /**
   * List of mentions in the content item per type.
   */
  mentions?: {
    persons?: ContentItemMention[];
    locations?: ContentItemMention[];
    organisations?: ContentItemMention[];
    newsagencies?: ContentItemMention[];
  };
  /**
   * List of topics assigned to the content item.
   */
  topics?: ContentItemTopic[];
  /**
   * List of user collections the content item belongs to.
   */
  collections?: Collection[];
  [k: string]: unknown;
}
/**
 * Content item named entity
 */
export interface ContentItemNamedEntity {
  /**
   * Unique identifier of the named entity
   */
  id?: string;
  /**
   * Number of times this entity is mentioned in the content item
   */
  count?: number;
  /**
   * The label of the named entity, e.g., a person's name or an organization
   */
  label?: string;
}
/**
 * Content item mention
 */
export interface ContentItemMention {
  /**
   * The surface form (label) of the entity mention
   */
  surfaceForm?: string;
  /**
   * Confidence score of the entity mention
   */
  mentionConfidence?: number;
  /**
   * Start offset of the entity mention in the content item
   */
  startOffset?: number;
  /**
   * End offset of the entity mention in the content item
   */
  endOffset?: number;
}
/**
 * Topic associated with a content item.
 */
export interface ContentItemTopic {
  /**
   * Relevance score of the topic in the content item, typically between 0 and 1, where 1 indicates high relevance.
   */
  relevance: number;
  /**
   * Unique identifier of the topic.
   */
  id: string;
  /**
   * Human-readable label of the topic.
   */
  label?: string;
  /**
   * Language code of the topic, following ISO 639-1 standards.
   */
  languageCode?: string;
}
/**
 * Description of the collection object (Collection class)
 */
export interface Collection {
  uid: string;
  name: string;
  description: string;
  status: StatusOfTheCollection;
  creationDate: string;
  lastModifiedDate: string;
  countItems: NumberOfItemsInTheCollection;
  creator: BaseUser;
  labels?: string[];
}
export interface BaseUser {
  uid: UniqueIdentifierForTheUser;
  username: UniqueUsernameForTheUserForOtherHumans;
  [k: string]: unknown;
}
/**
 * Image-related information for digitized content
 */
export interface ContentItemImage {
  /**
   * Total number of pages in the content item.
   */
  pagesCount?: number;
  /**
   * Indicates if the content item is on the front page.
   */
  isFrontPage?: boolean;
  /**
   * Indicates whether coordinates were converted.
   */
  isCoordinatesConverted?: boolean;
  /**
   * List of pages this content item is on.
   */
  pages?: ContentItemPage[];
  /**
   * List of line breaks offsets in the content item (relative to textual content).
   */
  lineBreaks?: number[];
  /**
   * List of paragraph breaks offsets in the content item (relative to textual content).
   */
  paragraphBreaks?: number[];
  /**
   * List of region breaks offsets in the content item (relative to textual content).
   */
  regionBreaks?: number[];
  [k: string]: unknown;
}
/**
 * Content item page
 */
export interface ContentItemPage {
  /**
   * Unique identifier of the page.
   */
  id?: string;
  /**
   * The number of the page.
   */
  number?: number;
  /**
   * List of region coordinates.
   */
  regionCoordinates?: [number, number, number, number][];
  iiif?: IIIFContentItemPageDetails;
}
/**
 * IIIF details for a content item page
 */
export interface IIIFContentItemPageDetails {
  /**
   * The URL of the IIIF manifest for the page.
   */
  manifestUrl: string;
  /**
   * The URL of the thumbnail image for the page.
   */
  thumnbnailUrl: string;
}
/**
 * Audio-related information for broadcast content
 */
export interface ContentItemAudio {
  /**
   * Start time of media in HH:MM:SS format (relative to the day of broadcast).
   */
  startTime?: string;
  /**
   * Duration of the radio broadcast in HH:MM:SS format (relative to the start of the broadcast on the given broadcast day).
   */
  duration?: string;
  /**
   * Array of records
   */
  records?: ContentItemAudioRecord[];
  /**
   * Total number of records/segments in the radio broadcast
   */
  recordsCount?: number;
  [k: string]: unknown;
}
/**
 * Content item audio record
 */
export interface ContentItemAudioRecord {
  /**
   * Unique identifier of the audio record.
   */
  id?: string;
  /**
   * The number of the audio record.
   */
  number?: number;
  /**
   * A list of audio segments locators.
   */
  audioSegmentsLocators?: ContentItemAudioLocator[];
  /**
   * The URL of the audio file.
   */
  audioFileUrl?: string;
}
/**
 * Content item audio locator. Links location of a segement in text with location in audio.
 */
export interface ContentItemAudioLocator {
  /**
   * Represents the start offset and the length of the audio segment in seconds.
   */
  timeCode?: number[];
  /**
   * Represents the character offset and length of the audio segment in the content item text.
   */
  textLocation?: number[];
  /**
   * Represents the index of the utterance in the audio file this audio segment belongs to. May not be provided if no utterance information is available.
   */
  utteranceIndex?: number;
}
/**
 * Access rights information
 */
export interface ContentItemAccessRights {
  /**
   * Rights data domain. (e.g., 'pbl' for public, 'prt' for private)
   */
  dataDomain: "pbl" | "prt";
  /**
   * Copyright status.
   */
  copyright: "pbl" | "und" | "nkn" | "euo" | "unk" | "in_cpy";
  accessBitmaps?: ContentItemAccessBitmaps;
  [k: string]: unknown;
}
/**
 * Access bitmaps for different functionalities.
 */
export interface ContentItemAccessBitmaps {
  /**
   * Bitmap for explore access. As bytes.
   */
  explore?: string;
  /**
   * Bitmap for get transcript access. As bytes.
   */
  getTranscript?: string;
  /**
   * Bitmap for get images access. As bytes.
   */
  getImages?: string;
  /**
   * Bitmap for get audio access. As bytes.
   */
  getAudio?: string;
}


/**
 * Content item access bitmaps
 */
export interface ContentItemAccessBitmaps {
  /**
   * Bitmap for explore access. As bytes.
   */
  explore?: string;
  /**
   * Bitmap for get transcript access. As bytes.
   */
  getTranscript?: string;
  /**
   * Bitmap for get images access. As bytes.
   */
  getImages?: string;
  /**
   * Bitmap for get audio access. As bytes.
   */
  getAudio?: string;
}


/**
 * Access rights information
 */
export interface ContentItemAccessRights {
  /**
   * Rights data domain. (e.g., 'pbl' for public, 'prt' for private)
   */
  dataDomain: "pbl" | "prt";
  /**
   * Copyright status.
   */
  copyright: "pbl" | "und" | "nkn" | "euo" | "unk" | "in_cpy";
  accessBitmaps?: ContentItemAccessBitmaps;
  [k: string]: unknown;
}
/**
 * Access bitmaps for different functionalities.
 */
export interface ContentItemAccessBitmaps {
  /**
   * Bitmap for explore access. As bytes.
   */
  explore?: string;
  /**
   * Bitmap for get transcript access. As bytes.
   */
  getTranscript?: string;
  /**
   * Bitmap for get images access. As bytes.
   */
  getImages?: string;
  /**
   * Bitmap for get audio access. As bytes.
   */
  getAudio?: string;
}


/**
 * Audio-related information for broadcast content
 */
export interface ContentItemAudio {
  /**
   * Start time of media in HH:MM:SS format (relative to the day of broadcast).
   */
  startTime?: string;
  /**
   * Duration of the radio broadcast in HH:MM:SS format (relative to the start of the broadcast on the given broadcast day).
   */
  duration?: string;
  /**
   * Array of records
   */
  records?: ContentItemAudioRecord[];
  /**
   * Total number of records/segments in the radio broadcast
   */
  recordsCount?: number;
  [k: string]: unknown;
}
/**
 * Content item audio record
 */
export interface ContentItemAudioRecord {
  /**
   * Unique identifier of the audio record.
   */
  id?: string;
  /**
   * The number of the audio record.
   */
  number?: number;
  /**
   * A list of audio segments locators.
   */
  audioSegmentsLocators?: ContentItemAudioLocator[];
  /**
   * The URL of the audio file.
   */
  audioFileUrl?: string;
}
/**
 * Content item audio locator. Links location of a segement in text with location in audio.
 */
export interface ContentItemAudioLocator {
  /**
   * Represents the start offset and the length of the audio segment in seconds.
   */
  timeCode?: number[];
  /**
   * Represents the character offset and length of the audio segment in the content item text.
   */
  textLocation?: number[];
  /**
   * Represents the index of the utterance in the audio file this audio segment belongs to. May not be provided if no utterance information is available.
   */
  utteranceIndex?: number;
}


/**
 * Content item audio locator. Links location of a segement in text with location in audio.
 */
export interface ContentItemAudioLocator {
  /**
   * Represents the start offset and the length of the audio segment in seconds.
   */
  timeCode?: number[];
  /**
   * Represents the character offset and length of the audio segment in the content item text.
   */
  textLocation?: number[];
  /**
   * Represents the index of the utterance in the audio file this audio segment belongs to. May not be provided if no utterance information is available.
   */
  utteranceIndex?: number;
}


/**
 * Content item audio record
 */
export interface ContentItemAudioRecord {
  /**
   * Unique identifier of the audio record.
   */
  id?: string;
  /**
   * The number of the audio record.
   */
  number?: number;
  /**
   * A list of audio segments locators.
   */
  audioSegmentsLocators?: ContentItemAudioLocator[];
  /**
   * The URL of the audio file.
   */
  audioFileUrl?: string;
}
/**
 * Content item audio locator. Links location of a segement in text with location in audio.
 */
export interface ContentItemAudioLocator {
  /**
   * Represents the start offset and the length of the audio segment in seconds.
   */
  timeCode?: number[];
  /**
   * Represents the character offset and length of the audio segment in the content item text.
   */
  textLocation?: number[];
  /**
   * Represents the index of the utterance in the audio file this audio segment belongs to. May not be provided if no utterance information is available.
   */
  utteranceIndex?: number;
}


/**
 * Image-related information for digitized content
 */
export interface ContentItemImage {
  /**
   * Total number of pages in the content item.
   */
  pagesCount?: number;
  /**
   * Indicates if the content item is on the front page.
   */
  isFrontPage?: boolean;
  /**
   * Indicates whether coordinates were converted.
   */
  isCoordinatesConverted?: boolean;
  /**
   * List of pages this content item is on.
   */
  pages?: ContentItemPage[];
  /**
   * List of line breaks offsets in the content item (relative to textual content).
   */
  lineBreaks?: number[];
  /**
   * List of paragraph breaks offsets in the content item (relative to textual content).
   */
  paragraphBreaks?: number[];
  /**
   * List of region breaks offsets in the content item (relative to textual content).
   */
  regionBreaks?: number[];
  [k: string]: unknown;
}
/**
 * Content item page
 */
export interface ContentItemPage {
  /**
   * Unique identifier of the page.
   */
  id?: string;
  /**
   * The number of the page.
   */
  number?: number;
  /**
   * List of region coordinates.
   */
  regionCoordinates?: [number, number, number, number][];
  iiif?: IIIFContentItemPageDetails;
}
/**
 * IIIF details for a content item page
 */
export interface IIIFContentItemPageDetails {
  /**
   * The URL of the IIIF manifest for the page.
   */
  manifestUrl: string;
  /**
   * The URL of the thumbnail image for the page.
   */
  thumnbnailUrl: string;
}


/**
 * Content item mention
 */
export interface ContentItemMention {
  /**
   * The surface form (label) of the entity mention
   */
  surfaceForm?: string;
  /**
   * Confidence score of the entity mention
   */
  mentionConfidence?: number;
  /**
   * Start offset of the entity mention in the content item
   */
  startOffset?: number;
  /**
   * End offset of the entity mention in the content item
   */
  endOffset?: number;
}


/**
 * Content Item metadata
 */
export interface ContentItemMeta {
  /**
   * Type of the media source.
   */
  sourceType: "newspaper" | "radio_broadcast" | "radio_magazine" | "radio_schedule" | "monograph" | "encyclopedia";
  /**
   * Medium of the source (audio for audio radio broadcasts, print for newspapers, typescript for digitised radio bulletin typescripts).
   */
  sourceMedium: "audio" | "print" | "typescript";
  /**
   * Media title alias. Usually a 3 letter code of the media title (newspaper, radio station, etc.).
   */
  mediaId?: string;
  /**
   * Full date and time in ISO 8601 format
   */
  date: string;
  /**
   * Identifier of the partner providing the content item.
   */
  partnerId?: string;
  /**
   * Country code of the content item.
   */
  countryCode?: string;
  /**
   * Province code of the content item.
   */
  provinceCode?: string;
}


/**
 * Content item named entity
 */
export interface ContentItemNamedEntity {
  /**
   * Unique identifier of the named entity
   */
  id?: string;
  /**
   * Number of times this entity is mentioned in the content item
   */
  count?: number;
  /**
   * The label of the named entity, e.g., a person's name or an organization
   */
  label?: string;
}


/**
 * Content item page
 */
export interface ContentItemPage {
  /**
   * Unique identifier of the page.
   */
  id?: string;
  /**
   * The number of the page.
   */
  number?: number;
  /**
   * List of region coordinates.
   */
  regionCoordinates?: [number, number, number, number][];
  iiif?: IIIFContentItemPageDetails;
}
/**
 * IIIF details for a content item page
 */
export interface IIIFContentItemPageDetails {
  /**
   * The URL of the IIIF manifest for the page.
   */
  manifestUrl: string;
  /**
   * The URL of the thumbnail image for the page.
   */
  thumnbnailUrl: string;
}


/**
 * IIIF details for a content item page
 */
export interface IIIFContentItemPageDetails {
  /**
   * The URL of the IIIF manifest for the page.
   */
  manifestUrl: string;
  /**
   * The URL of the thumbnail image for the page.
   */
  thumnbnailUrl: string;
}


export type StatusOfTheCollection = string;
export type NumberOfItemsInTheCollection = number | string;
export type UniqueIdentifierForTheUser = string;
export type UniqueUsernameForTheUserForOtherHumans = string;

/**
 * Semantic enrichments information
 */
export interface ContentItemSemanticEnrichments {
  /**
   * OCR quality assessment score between 0,00 and 1,00.
   */
  ocrQuality?: number;
  /**
   * Lists of named entities in the content item by type.
   */
  namedEntities?: {
    persons?: ContentItemNamedEntity[];
    locations?: ContentItemNamedEntity[];
    organisations?: ContentItemNamedEntity[];
    newsagencies?: ContentItemNamedEntity[];
  };
  /**
   * List of mentions in the content item per type.
   */
  mentions?: {
    persons?: ContentItemMention[];
    locations?: ContentItemMention[];
    organisations?: ContentItemMention[];
    newsagencies?: ContentItemMention[];
  };
  /**
   * List of topics assigned to the content item.
   */
  topics?: ContentItemTopic[];
  /**
   * List of user collections the content item belongs to.
   */
  collections?: Collection[];
  [k: string]: unknown;
}
/**
 * Content item named entity
 */
export interface ContentItemNamedEntity {
  /**
   * Unique identifier of the named entity
   */
  id?: string;
  /**
   * Number of times this entity is mentioned in the content item
   */
  count?: number;
  /**
   * The label of the named entity, e.g., a person's name or an organization
   */
  label?: string;
}
/**
 * Content item mention
 */
export interface ContentItemMention {
  /**
   * The surface form (label) of the entity mention
   */
  surfaceForm?: string;
  /**
   * Confidence score of the entity mention
   */
  mentionConfidence?: number;
  /**
   * Start offset of the entity mention in the content item
   */
  startOffset?: number;
  /**
   * End offset of the entity mention in the content item
   */
  endOffset?: number;
}
/**
 * Topic associated with a content item.
 */
export interface ContentItemTopic {
  /**
   * Relevance score of the topic in the content item, typically between 0 and 1, where 1 indicates high relevance.
   */
  relevance: number;
  /**
   * Unique identifier of the topic.
   */
  id: string;
  /**
   * Human-readable label of the topic.
   */
  label?: string;
  /**
   * Language code of the topic, following ISO 639-1 standards.
   */
  languageCode?: string;
}
/**
 * Description of the collection object (Collection class)
 */
export interface Collection {
  uid: string;
  name: string;
  description: string;
  status: StatusOfTheCollection;
  creationDate: string;
  lastModifiedDate: string;
  countItems: NumberOfItemsInTheCollection;
  creator: BaseUser;
  labels?: string[];
}
export interface BaseUser {
  uid: UniqueIdentifierForTheUser;
  username: UniqueUsernameForTheUserForOtherHumans;
  [k: string]: unknown;
}


/**
 * Textual content details
 */
export interface ContentItemText {
  /**
   * Type of document, e.g., page (p) or content item (ci).
   */
  documentType?: "p" | "ci";
  /**
   * Type of content item, e.g., article, section.
   */
  itemType?:
    | "ar"
    | "ad"
    | "page"
    | "tb"
    | "ob"
    | "w"
    | "chapter"
    | "chronicle"
    | "unsegmented"
    | "radio_broadcast_episode"
    | "radio_bulletin";
  /**
   * Original language of the content item.
   */
  originalLangCode?: string;
  /**
   * Computed language of the content item.
   */
  langCode?: string;
  /**
   * Token count of the content item (space split).
   */
  contentLength?: number;
  /**
   * Snippet of the content item (first 150 characters).
   */
  snippet?: string;
  /**
   * Title of the content item
   */
  title?: string;
  /**
   * Full text content
   */
  content?: string;
  matches?: ContentItemTextMatch[];
}
/**
 * TODO
 */
export interface ContentItemTextMatch {
  /**
   * TODO
   */
  fragment: string;
  /**
   * TODO
   */
  coords?: number[];
  /**
   * TODO
   */
  pageUid?: string;
  /**
   * TODO
   */
  iiif?: string;
}


/**
 * TODO
 */
export interface ContentItemTextMatch {
  /**
   * TODO
   */
  fragment: string;
  /**
   * TODO
   */
  coords?: number[];
  /**
   * TODO
   */
  pageUid?: string;
  /**
   * TODO
   */
  iiif?: string;
}


/**
 * Topic associated with a content item.
 */
export interface ContentItemTopic {
  /**
   * Relevance score of the topic in the content item, typically between 0 and 1, where 1 indicates high relevance.
   */
  relevance: number;
  /**
   * Unique identifier of the topic.
   */
  id: string;
  /**
   * Human-readable label of the topic.
   */
  label?: string;
  /**
   * Language code of the topic, following ISO 639-1 standards.
   */
  languageCode?: string;
}
