import fs from 'node:fs'
import { compileFromFile } from 'json-schema-to-typescript'

const banner: string = `
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
`

const middleLayerPath = '../impresso-middle-layer'

const basePath: string = `${middleLayerPath}/src/schema`
const outputPath: string = './src/models/generated'
const schemaBits: string[] = ['schemas', 'schemas/contentItem']

const directories = fs
  .readdirSync(basePath, {
    recursive: true
  })
  .filter((item: string) => {
    const s = fs.statSync(`${basePath}/${item}`)
    return s.isDirectory()
  })
  .filter((item: string) => schemaBits.includes(item)) as string[]

async function compileDirectory(
  basePath: string,
  dir: string,
  outputBasePath: string
): Promise<void> {
  const dirPath: string = `${basePath}/${dir}`

  const files: string[] = fs.readdirSync(dirPath).filter((item: string) => {
    const path = `${dirPath}/${item}`
    const isDir = fs.statSync(path).isDirectory()
    return !isDir
  })
  // eslint-disable-next-line no-console
  console.log(`${files.length} files in ${dir}:`)

  const tsContents: string[] = await Promise.all(
    files.map((fileName: string) => {
      const inputFile = `${dirPath}/${fileName}`
      return compileFromFile(inputFile, {
        bannerComment: ''
      })
    })
  )

  const content: string = [banner, ...tsContents].join('\n\n')
  const outputFile: string = `${outputBasePath}/${dir}.d.ts`
  fs.writeFileSync(outputFile, content)
}

async function compileAll(
  basePath: string,
  outputPath: string,
  directories: string[]
): Promise<void> {
  for (const dir of directories) {
    // eslint-disable-next-line no-console
    console.log(`Generating types for group ${dir}...`)
    await compileDirectory(basePath, dir, outputPath)
  }
}

compileAll(basePath, outputPath, directories)
  .then(() => {
    // eslint-disable-next-line no-console
    console.log('Done')
  })
  .catch((e: Error) => console.error(e))
